# == Class: nomad
#
# Installs, configures, and manages nomad
#
# === Parameters
#
# [*version*]
#   Specify version of nomad binary to download.
#
# [*config_hash*]
#   Use this to populate the JSON config file for nomad.
#
# [*config_mode*]
#   Use this to set the JSON config file mode for nomad.
#
# [*pretty_config*]
#   Generates a human readable JSON config file. Defaults to `false`.
#
# [*pretty_config_indent*]
#   Toggle indentation for human readable JSON file. Defaults to `4`.
#
# [*install_method*]
#   Valid strings: `package` - install via system package
#                  `url`     - download and extract from a url. Defaults to `url`.
#                  `none`    - disable install.
#
# [*package_name*]
#   Only valid when the install_method == package. Defaults to `nomad`.
#
# [*package_ensure*]
#   Only valid when the install_method == package. Defaults to `installed`.
#
#
# [*restart_on_change*]
#   Determines whether to restart nomad agent on $config_hash changes.
#   This will not affect reloads when service, check or watch configs change.
# Defaults to `true`.
#
# [*extra_options*]
#   Extra arguments to be passed to the nomad agent
#
# [*init_style*]
#   What style of init system your system uses.
#
# [*purge_config_dir*]
#   Purge config files no longer generated by Puppet
class nomad (
  String[1] $arch,
  Boolean $manage_user                           = true,
  String[1] $user                                = 'nomad',
  Boolean $manage_group                          = true,
  Array[String[1]] $extra_groups                 = [],
  Boolean $purge_config_dir                      = true,
  String[1] $group                               = 'nomad',
  Optional[String[1]] $join_wan                  = undef,
  Stdlib::Absolutepath $bin_dir                  = '/usr/local/bin',
  String[1] $version                             = '1.0.1',
  Enum['url', 'package', 'none'] $install_method = 'url',
  String[1] $os                                  = downcase($facts['kernel']),
  Optional[String[1]] $download_url              = undef,
  String[1] $download_url_base                   = 'https://releases.hashicorp.com/nomad/',
  String[1] $download_extension                  = 'zip',
  String[1] $package_name                        = 'nomad',
  String[1] $package_ensure                      = 'installed',
  Stdlib::Absolutepath $config_dir               = '/etc/nomad',
  String $extra_options                          = '',
  Hash $config_hash                              = {},
  Hash $config_defaults                          = {},
  Stdlib::Filemode $config_mode                  = '0660',
  Boolean $pretty_config                         = false,
  Integer $pretty_config_indent                  = 4,
  Boolean $service_enable                        = true,
  Stdlib::Ensure::Service $service_ensure        = 'running',
  Boolean $manage_service                        = true,
  Boolean $restart_on_change                     = true,
  Variant[String[1], Boolean] $init_style        = $facts['service_provider'],
) {
  $real_download_url = pick($download_url, "${download_url_base}${version}/${package_name}_${version}_${os}_${arch}.${download_extension}")
  $config_hash_real = deep_merge($config_defaults, $config_hash)

  if $config_hash_real['data_dir'] {
    $data_dir = $config_hash_real['data_dir']
  } else {
    $data_dir = undef
  }

  if ($config_hash_real['ports'] and $config_hash_real['ports']['rpc']) {
    $rpc_port = $config_hash_real['ports']['rpc']
  } else {
    $rpc_port = 8400
  }

  if ($config_hash_real['addresses'] and $config_hash_real['addresses']['rpc']) {
    $rpc_addr = $config_hash_real['addresses']['rpc']
  } elsif ($config_hash_real['client_addr']) {
    $rpc_addr = $config_hash_real['client_addr']
  } else {
    $rpc_addr = $facts['networking']['interfaces']['lo']['ip']
  }

  $notify_service = $restart_on_change ? {
    true    => Class['nomad::run_service'],
    default => undef,
  }

  class { 'nomad::install': }
  -> class { 'nomad::config':
    config_hash => $config_hash_real,
    purge       => $purge_config_dir,
    notify      => $notify_service,
  }
  -> class { 'nomad::run_service': }
  -> class { 'nomad::reload_service': }

  contain nomad::install
  contain nomad::config
  contain nomad::run_service
  contain nomad::reload_service
}
